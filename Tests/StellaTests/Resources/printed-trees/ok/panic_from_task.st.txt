▿ Stella.Program
  - languageDeclaration: Stella.LanguageDeclaration.languageCore
  ▿ extensions: 1 element
    ▿ Stella.LanguageExtension
      ▿ names: 3 elements
        ▿ Stella.LanguageExtension.Name
          - value: "panic"
        ▿ Stella.LanguageExtension.Name
          - value: "pairs"
        ▿ Stella.LanguageExtension.Name
          - value: "fixpoint-combinator"
  ▿ declarations: 5 elements
    ▿ Stella.Declaration.function
      ▿ function: (7 elements)
        - annotations: 0 elements
        ▿ name: Stella.Identifier
          - value: "dec"
        ▿ parameters: 1 element
          ▿ Stella.Declaration.Parameter
            ▿ name: Stella.Identifier
              - value: "n"
            - type: Stella.Type.nat
        ▿ returnType: Optional(Stella.Type.nat)
          - some: Stella.Type.nat
        - throwTypes: 0 elements
        - body: 0 elements
        ▿ return: Stella.Expression.dotTuple
          ▿ dotTuple: (2 elements)
            ▿ .0: Stella.Expression.natRec
              ▿ natRec: (3 elements)
                ▿ .0: Stella.Expression.var
                  ▿ var: Stella.Identifier
                    - value: "n"
                ▿ .1: Stella.Expression.tuple
                  ▿ tuple: 2 elements
                    ▿ Stella.Expression.constInt
                      - constInt: 0
                    ▿ Stella.Expression.constInt
                      - constInt: 0
                ▿ .2: Stella.Expression.abstraction
                  ▿ abstraction: (2 elements)
                    ▿ .0: 1 element
                      ▿ Stella.Declaration.Parameter
                        ▿ name: Stella.Identifier
                          - value: "k"
                        - type: Stella.Type.nat
                    ▿ .1: Stella.Expression.abstraction
                      ▿ abstraction: (2 elements)
                        ▿ .0: 1 element
                          ▿ Stella.Declaration.Parameter
                            ▿ name: Stella.Identifier
                              - value: "p"
                            ▿ type: Stella.Type.tuple
                              ▿ tuple: 2 elements
                                - Stella.Type.nat
                                - Stella.Type.nat
                        ▿ .1: Stella.Expression.tuple
                          ▿ tuple: 2 elements
                            ▿ Stella.Expression.succ
                              ▿ succ: Stella.Expression.dotTuple
                                ▿ dotTuple: (2 elements)
                                  ▿ .0: Stella.Expression.var
                                    ▿ var: Stella.Identifier
                                      - value: "p"
                                  - .1: 1
                            ▿ Stella.Expression.dotTuple
                              ▿ dotTuple: (2 elements)
                                ▿ .0: Stella.Expression.var
                                  ▿ var: Stella.Identifier
                                    - value: "p"
                                - .1: 1
            - .1: 2
    ▿ Stella.Declaration.function
      ▿ function: (7 elements)
        - annotations: 0 elements
        ▿ name: Stella.Identifier
          - value: "sub"
        ▿ parameters: 1 element
          ▿ Stella.Declaration.Parameter
            ▿ name: Stella.Identifier
              - value: "n"
            - type: Stella.Type.nat
        ▿ returnType: Optional(Stella.Type.function(from: [Stella.Type.nat], to: Stella.Type.nat))
          ▿ some: Stella.Type.function
            ▿ function: (2 elements)
              ▿ from: 1 element
                - Stella.Type.nat
              - to: Stella.Type.nat
        - throwTypes: 0 elements
        - body: 0 elements
        ▿ return: Stella.Expression.abstraction
          ▿ abstraction: (2 elements)
            ▿ .0: 1 element
              ▿ Stella.Declaration.Parameter
                ▿ name: Stella.Identifier
                  - value: "m"
                - type: Stella.Type.nat
            ▿ .1: Stella.Expression.natRec
              ▿ natRec: (3 elements)
                ▿ .0: Stella.Expression.var
                  ▿ var: Stella.Identifier
                    - value: "m"
                ▿ .1: Stella.Expression.var
                  ▿ var: Stella.Identifier
                    - value: "n"
                ▿ .2: Stella.Expression.abstraction
                  ▿ abstraction: (2 elements)
                    ▿ .0: 1 element
                      ▿ Stella.Declaration.Parameter
                        ▿ name: Stella.Identifier
                          - value: "k"
                        - type: Stella.Type.nat
                    ▿ .1: Stella.Expression.var
                      ▿ var: Stella.Identifier
                        - value: "dec"
    ▿ Stella.Declaration.function
      ▿ function: (7 elements)
        - annotations: 0 elements
        ▿ name: Stella.Identifier
          - value: "mkdiv"
        ▿ parameters: 1 element
          ▿ Stella.Declaration.Parameter
            ▿ name: Stella.Identifier
              - value: "div"
            ▿ type: Stella.Type.function
              ▿ function: (2 elements)
                ▿ from: 1 element
                  - Stella.Type.nat
                ▿ to: Stella.Type.function
                  ▿ function: (2 elements)
                    ▿ from: 1 element
                      - Stella.Type.nat
                    - to: Stella.Type.nat
        ▿ returnType: Optional(Stella.Type.function(from: [Stella.Type.nat], to: Stella.Type.function(from: [Stella.Type.nat], to: Stella.Type.nat)))
          ▿ some: Stella.Type.function
            ▿ function: (2 elements)
              ▿ from: 1 element
                - Stella.Type.nat
              ▿ to: Stella.Type.function
                ▿ function: (2 elements)
                  ▿ from: 1 element
                    - Stella.Type.nat
                  - to: Stella.Type.nat
        - throwTypes: 0 elements
        - body: 0 elements
        ▿ return: Stella.Expression.abstraction
          ▿ abstraction: (2 elements)
            ▿ .0: 1 element
              ▿ Stella.Declaration.Parameter
                ▿ name: Stella.Identifier
                  - value: "n"
                - type: Stella.Type.nat
            ▿ .1: Stella.Expression.abstraction
              ▿ abstraction: (2 elements)
                ▿ .0: 1 element
                  ▿ Stella.Declaration.Parameter
                    ▿ name: Stella.Identifier
                      - value: "m"
                    - type: Stella.Type.nat
                ▿ .1: Stella.Expression.if
                  ▿ if: (3 elements)
                    ▿ condition: Stella.Expression.isZero
                      ▿ isZero: Stella.Expression.var
                        ▿ var: Stella.Identifier
                          - value: "n"
                    ▿ then: Stella.Expression.constInt
                      - constInt: 0
                    ▿ else: Stella.Expression.succ
                      ▿ succ: Stella.Expression.application
                        ▿ application: (2 elements)
                          ▿ .0: Stella.Expression.application
                            ▿ application: (2 elements)
                              ▿ .0: Stella.Expression.var
                                ▿ var: Stella.Identifier
                                  - value: "div"
                              ▿ .1: 1 element
                                ▿ Stella.Expression.application
                                  ▿ application: (2 elements)
                                    ▿ .0: Stella.Expression.application
                                      ▿ application: (2 elements)
                                        ▿ .0: Stella.Expression.var
                                          ▿ var: Stella.Identifier
                                            - value: "sub"
                                        ▿ .1: 1 element
                                          ▿ Stella.Expression.var
                                            ▿ var: Stella.Identifier
                                              - value: "n"
                                    ▿ .1: 1 element
                                      ▿ Stella.Expression.var
                                        ▿ var: Stella.Identifier
                                          - value: "m"
                          ▿ .1: 1 element
                            ▿ Stella.Expression.var
                              ▿ var: Stella.Identifier
                                - value: "m"
    ▿ Stella.Declaration.function
      ▿ function: (7 elements)
        - annotations: 0 elements
        ▿ name: Stella.Identifier
          - value: "div"
        ▿ parameters: 1 element
          ▿ Stella.Declaration.Parameter
            ▿ name: Stella.Identifier
              - value: "n"
            - type: Stella.Type.nat
        ▿ returnType: Optional(Stella.Type.function(from: [Stella.Type.nat], to: Stella.Type.nat))
          ▿ some: Stella.Type.function
            ▿ function: (2 elements)
              ▿ from: 1 element
                - Stella.Type.nat
              - to: Stella.Type.nat
        - throwTypes: 0 elements
        - body: 0 elements
        ▿ return: Stella.Expression.abstraction
          ▿ abstraction: (2 elements)
            ▿ .0: 1 element
              ▿ Stella.Declaration.Parameter
                ▿ name: Stella.Identifier
                  - value: "m"
                - type: Stella.Type.nat
            ▿ .1: Stella.Expression.if
              ▿ if: (3 elements)
                ▿ condition: Stella.Expression.isZero
                  ▿ isZero: Stella.Expression.var
                    ▿ var: Stella.Identifier
                      - value: "m"
                - then: Stella.Expression.panic
                ▿ else: Stella.Expression.application
                  ▿ application: (2 elements)
                    ▿ .0: Stella.Expression.application
                      ▿ application: (2 elements)
                        ▿ .0: Stella.Expression.fix
                          ▿ fix: Stella.Expression.var
                            ▿ var: Stella.Identifier
                              - value: "mkdiv"
                        ▿ .1: 1 element
                          ▿ Stella.Expression.var
                            ▿ var: Stella.Identifier
                              - value: "n"
                    ▿ .1: 1 element
                      ▿ Stella.Expression.var
                        ▿ var: Stella.Identifier
                          - value: "m"
    ▿ Stella.Declaration.function
      ▿ function: (7 elements)
        - annotations: 0 elements
        ▿ name: Stella.Identifier
          - value: "main"
        ▿ parameters: 1 element
          ▿ Stella.Declaration.Parameter
            ▿ name: Stella.Identifier
              - value: "n"
            - type: Stella.Type.nat
        ▿ returnType: Optional(Stella.Type.nat)
          - some: Stella.Type.nat
        - throwTypes: 0 elements
        - body: 0 elements
        ▿ return: Stella.Expression.application
          ▿ application: (2 elements)
            ▿ .0: Stella.Expression.application
              ▿ application: (2 elements)
                ▿ .0: Stella.Expression.var
                  ▿ var: Stella.Identifier
                    - value: "div"
                ▿ .1: 1 element
                  ▿ Stella.Expression.var
                    ▿ var: Stella.Identifier
                      - value: "n"
            ▿ .1: 1 element
              ▿ Stella.Expression.var
                ▿ var: Stella.Identifier
                  - value: "n"
