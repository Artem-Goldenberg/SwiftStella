▿ Stella.Program
  - languageDeclaration: Stella.LanguageDeclaration.languageCore
  ▿ extensions: 1 element
    ▿ Stella.LanguageExtension
      ▿ names: 4 elements
        ▿ Stella.LanguageExtension.Name
          - value: "unit-type"
        ▿ Stella.LanguageExtension.Name
          - value: "references"
        ▿ Stella.LanguageExtension.Name
          - value: "let-bindings"
        ▿ Stella.LanguageExtension.Name
          - value: "sequencing"
  ▿ declarations: 3 elements
    ▿ Stella.Declaration.function
      ▿ function: (7 elements)
        - annotations: 0 elements
        ▿ name: Stella.Identifier
          - value: "inc_ref"
        ▿ parameters: 1 element
          ▿ Stella.Declaration.Parameter
            ▿ name: Stella.Identifier
              - value: "ref"
            ▿ type: Stella.Type.reference
              - reference: Stella.Type.nat
        ▿ returnType: Optional(Stella.Type.unit)
          - some: Stella.Type.unit
        - throwTypes: 0 elements
        - body: 0 elements
        ▿ return: Stella.Expression.assign
          ▿ assign: (2 elements)
            ▿ .0: Stella.Expression.var
              ▿ var: Stella.Identifier
                - value: "ref"
            ▿ .1: Stella.Expression.succ
              ▿ succ: Stella.Expression.deref
                ▿ deref: Stella.Expression.var
                  ▿ var: Stella.Identifier
                    - value: "ref"
    ▿ Stella.Declaration.function
      ▿ function: (7 elements)
        - annotations: 0 elements
        ▿ name: Stella.Identifier
          - value: "inc3"
        ▿ parameters: 1 element
          ▿ Stella.Declaration.Parameter
            ▿ name: Stella.Identifier
              - value: "ref"
            ▿ type: Stella.Type.reference
              - reference: Stella.Type.nat
        ▿ returnType: Optional(Stella.Type.nat)
          - some: Stella.Type.nat
        - throwTypes: 0 elements
        - body: 0 elements
        ▿ return: Stella.Expression.sequence
          ▿ sequence: (2 elements)
            ▿ .0: Stella.Expression.application
              ▿ application: (2 elements)
                ▿ .0: Stella.Expression.var
                  ▿ var: Stella.Identifier
                    - value: "inc_ref"
                ▿ .1: 1 element
                  ▿ Stella.Expression.var
                    ▿ var: Stella.Identifier
                      - value: "ref"
            ▿ .1: Stella.Expression.sequence
              ▿ sequence: (2 elements)
                ▿ .0: Stella.Expression.application
                  ▿ application: (2 elements)
                    ▿ .0: Stella.Expression.var
                      ▿ var: Stella.Identifier
                        - value: "inc_ref"
                    ▿ .1: 1 element
                      ▿ Stella.Expression.var
                        ▿ var: Stella.Identifier
                          - value: "ref"
                ▿ .1: Stella.Expression.sequence
                  ▿ sequence: (2 elements)
                    ▿ .0: Stella.Expression.application
                      ▿ application: (2 elements)
                        ▿ .0: Stella.Expression.var
                          ▿ var: Stella.Identifier
                            - value: "inc_ref"
                        ▿ .1: 1 element
                          ▿ Stella.Expression.var
                            ▿ var: Stella.Identifier
                              - value: "ref"
                    ▿ .1: Stella.Expression.deref
                      ▿ deref: Stella.Expression.var
                        ▿ var: Stella.Identifier
                          - value: "ref"
    ▿ Stella.Declaration.function
      ▿ function: (7 elements)
        - annotations: 0 elements
        ▿ name: Stella.Identifier
          - value: "main"
        ▿ parameters: 1 element
          ▿ Stella.Declaration.Parameter
            ▿ name: Stella.Identifier
              - value: "n"
            - type: Stella.Type.nat
        ▿ returnType: Optional(Stella.Type.nat)
          - some: Stella.Type.nat
        - throwTypes: 0 elements
        - body: 0 elements
        ▿ return: Stella.Expression.let
          ▿ let: (2 elements)
            ▿ .0: 1 element
              ▿ (2 elements)
                ▿ .0: Stella.Pattern.var
                  ▿ var: Stella.Identifier
                    - value: "ref"
                ▿ .1: Stella.Expression.ref
                  ▿ ref: Stella.Expression.var
                    ▿ var: Stella.Identifier
                      - value: "n"
            ▿ .1: Stella.Expression.application
              ▿ application: (2 elements)
                ▿ .0: Stella.Expression.var
                  ▿ var: Stella.Identifier
                    - value: "inc3"
                ▿ .1: 1 element
                  ▿ Stella.Expression.var
                    ▿ var: Stella.Identifier
                      - value: "ref"
