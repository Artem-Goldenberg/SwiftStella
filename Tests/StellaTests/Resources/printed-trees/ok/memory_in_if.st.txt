▿ Stella.Program
  - languageDeclaration: Stella.LanguageDeclaration.languageCore
  ▿ extensions: 1 element
    ▿ Stella.LanguageExtension
      ▿ names: 2 elements
        ▿ Stella.LanguageExtension.Name
          - value: "references"
        ▿ Stella.LanguageExtension.Name
          - value: "type-ascriptions"
  ▿ declarations: 2 elements
    ▿ Stella.Declaration.function
      ▿ function: (7 elements)
        - annotations: 0 elements
        ▿ name: Stella.Identifier
          - value: "foo"
        ▿ parameters: 1 element
          ▿ Stella.Declaration.Parameter
            ▿ name: Stella.Identifier
              - value: "n"
            - type: Stella.Type.nat
        ▿ returnType: Optional(Stella.Type.reference(Stella.Type.nat))
          ▿ some: Stella.Type.reference
            - reference: Stella.Type.nat
        - throwTypes: 0 elements
        - body: 0 elements
        ▿ return: Stella.Expression.if
          ▿ if: (3 elements)
            ▿ condition: Stella.Expression.isZero
              ▿ isZero: Stella.Expression.var
                ▿ var: Stella.Identifier
                  - value: "n"
            ▿ then: Stella.Expression.constMemory
              ▿ constMemory: Stella.MemoryAddress
                - value: "01"
            ▿ else: Stella.Expression.constMemory
              ▿ constMemory: Stella.MemoryAddress
                - value: "02"
    ▿ Stella.Declaration.function
      ▿ function: (7 elements)
        - annotations: 0 elements
        ▿ name: Stella.Identifier
          - value: "main"
        ▿ parameters: 1 element
          ▿ Stella.Declaration.Parameter
            ▿ name: Stella.Identifier
              - value: "n"
            - type: Stella.Type.nat
        ▿ returnType: Optional(Stella.Type.nat)
          - some: Stella.Type.nat
        - throwTypes: 0 elements
        - body: 0 elements
        ▿ return: Stella.Expression.deref
          ▿ deref: Stella.Expression.application
            ▿ application: (2 elements)
              ▿ .0: Stella.Expression.var
                ▿ var: Stella.Identifier
                  - value: "foo"
              ▿ .1: 1 element
                ▿ Stella.Expression.constInt
                  - constInt: 0
