▿ Stella.Program
  - languageDeclaration: Stella.LanguageDeclaration.languageCore
  ▿ extensions: 1 element
    ▿ Stella.LanguageExtension
      ▿ names: 5 elements
        ▿ Stella.LanguageExtension.Name
          - value: "#let-patterns"
        ▿ Stella.LanguageExtension.Name
          - value: "#pattern-ascriptions"
        ▿ Stella.LanguageExtension.Name
          - value: "#let-bindings"
        ▿ Stella.LanguageExtension.Name
          - value: "#letrec-bindings"
        ▿ Stella.LanguageExtension.Name
          - value: "#lists"
  ▿ declarations: 2 elements
    ▿ Stella.Declaration.function
      ▿ function: (7 elements)
        - annotations: 0 elements
        ▿ name: Stella.Identifier
          - value: "foo"
        ▿ parameters: 1 element
          ▿ Stella.Declaration.Parameter
            ▿ name: Stella.Identifier
              - value: "n"
            - type: Stella.Type.nat
        ▿ returnType: Optional(Stella.Type.nat)
          - some: Stella.Type.nat
        - throwTypes: 0 elements
        - body: 0 elements
        ▿ return: Stella.Expression.var
          ▿ var: Stella.Identifier
            - value: "n"
    ▿ Stella.Declaration.function
      ▿ function: (7 elements)
        - annotations: 0 elements
        ▿ name: Stella.Identifier
          - value: "main"
        ▿ parameters: 1 element
          ▿ Stella.Declaration.Parameter
            ▿ name: Stella.Identifier
              - value: "n"
            - type: Stella.Type.nat
        ▿ returnType: Optional(Stella.Type.nat)
          - some: Stella.Type.nat
        - throwTypes: 0 elements
        - body: 0 elements
        ▿ return: Stella.Expression.letrec
          ▿ letrec: (2 elements)
            ▿ .0: 1 element
              ▿ (2 elements)
                ▿ .0: Stella.Pattern.ascription
                  ▿ ascription: (2 elements)
                    ▿ .0: Stella.Pattern.var
                      ▿ var: Stella.Identifier
                        - value: "length"
                    ▿ .1: Stella.Type.function
                      ▿ function: (2 elements)
                        ▿ from: 1 element
                          ▿ Stella.Type.list
                            ▿ list: (1 element)
                              - of: Stella.Type.nat
                        - to: Stella.Type.nat
                ▿ .1: Stella.Expression.abstraction
                  ▿ abstraction: (2 elements)
                    ▿ .0: 1 element
                      ▿ Stella.Declaration.Parameter
                        ▿ name: Stella.Identifier
                          - value: "xs"
                        ▿ type: Stella.Type.list
                          ▿ list: (1 element)
                            - of: Stella.Type.nat
                    ▿ .1: Stella.Expression.if
                      ▿ if: (3 elements)
                        ▿ condition: Stella.Expression.isEmpty
                          ▿ isEmpty: Stella.Expression.var
                            ▿ var: Stella.Identifier
                              - value: "xs"
                        ▿ then: Stella.Expression.constInt
                          - constInt: 0
                        ▿ else: Stella.Expression.succ
                          ▿ succ: Stella.Expression.application
                            ▿ application: (2 elements)
                              ▿ .0: Stella.Expression.var
                                ▿ var: Stella.Identifier
                                  - value: "length"
                              ▿ .1: 1 element
                                ▿ Stella.Expression.tail
                                  ▿ tail: Stella.Expression.var
                                    ▿ var: Stella.Identifier
                                      - value: "xs"
            ▿ .1: Stella.Expression.let
              ▿ let: (2 elements)
                ▿ .0: 1 element
                  ▿ (2 elements)
                    ▿ .0: Stella.Pattern.var
                      ▿ var: Stella.Identifier
                        - value: "list"
                    ▿ .1: Stella.Expression.consList
                      ▿ consList: (2 elements)
                        ▿ .0: Stella.Expression.constInt
                          - constInt: 0
                        ▿ .1: Stella.Expression.consList
                          ▿ consList: (2 elements)
                            ▿ .0: Stella.Expression.constInt
                              - constInt: 0
                            ▿ .1: Stella.Expression.list
                              - list: 0 elements
                ▿ .1: Stella.Expression.application
                  ▿ application: (2 elements)
                    ▿ .0: Stella.Expression.var
                      ▿ var: Stella.Identifier
                        - value: "length"
                    ▿ .1: 1 element
                      ▿ Stella.Expression.var
                        ▿ var: Stella.Identifier
                          - value: "list"
