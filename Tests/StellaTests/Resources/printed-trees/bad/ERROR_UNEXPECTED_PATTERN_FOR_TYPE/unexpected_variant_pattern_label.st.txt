▿ Stella.Program
  - languageDeclaration: Stella.LanguageDeclaration.languageCore
  ▿ extensions: 1 element
    ▿ Stella.LanguageExtension
      ▿ names: 3 elements
        ▿ Stella.LanguageExtension.Name
          - value: "#variants"
        ▿ Stella.LanguageExtension.Name
          - value: "#unit-type"
        ▿ Stella.LanguageExtension.Name
          - value: "#sum-types"
  ▿ declarations: 2 elements
    ▿ Stella.Declaration.function
      ▿ function: (7 elements)
        - annotations: 0 elements
        ▿ name: Stella.Identifier
          - value: "attempt"
        ▿ parameters: 1 element
          ▿ Stella.Declaration.Parameter
            ▿ name: Stella.Identifier
              - value: "get_one?"
            - type: Stella.Type.bool
        ▿ returnType: Optional(Stella.Type.variant([(Stella.Identifier(value: "value"), Optional(Stella.Type.nat)), (Stella.Identifier(value: "failure"), Optional(Stella.Type.unit))]))
          ▿ some: Stella.Type.variant
            ▿ variant: 2 elements
              ▿ (2 elements)
                ▿ .0: Stella.Identifier
                  - value: "value"
                ▿ .1: Optional(Stella.Type.nat)
                  - some: Stella.Type.nat
              ▿ (2 elements)
                ▿ .0: Stella.Identifier
                  - value: "failure"
                ▿ .1: Optional(Stella.Type.unit)
                  - some: Stella.Type.unit
        - throwTypes: 0 elements
        - body: 0 elements
        ▿ return: Stella.Expression.if
          ▿ if: (3 elements)
            ▿ condition: Stella.Expression.var
              ▿ var: Stella.Identifier
                - value: "get_one?"
            ▿ then: Stella.Expression.variant
              ▿ variant: (2 elements)
                ▿ .0: Stella.Identifier
                  - value: "value"
                ▿ .1: Optional(Stella.Expression.constInt(0))
                  ▿ some: Stella.Expression.constInt
                    - constInt: 0
            ▿ else: Stella.Expression.variant
              ▿ variant: (2 elements)
                ▿ .0: Stella.Identifier
                  - value: "failure"
                ▿ .1: Optional(Stella.Expression.constUnit)
                  - some: Stella.Expression.constUnit
    ▿ Stella.Declaration.function
      ▿ function: (7 elements)
        - annotations: 0 elements
        ▿ name: Stella.Identifier
          - value: "main"
        ▿ parameters: 1 element
          ▿ Stella.Declaration.Parameter
            ▿ name: Stella.Identifier
              - value: "succeed"
            - type: Stella.Type.bool
        ▿ returnType: Optional(Stella.Type.nat)
          - some: Stella.Type.nat
        - throwTypes: 0 elements
        - body: 0 elements
        ▿ return: Stella.Expression.match
          ▿ match: (2 elements)
            ▿ .0: Stella.Expression.application
              ▿ application: (2 elements)
                ▿ .0: Stella.Expression.var
                  ▿ var: Stella.Identifier
                    - value: "attempt"
                ▿ .1: 1 element
                  ▿ Stella.Expression.var
                    ▿ var: Stella.Identifier
                      - value: "succeed"
            ▿ .1: 1 element
              ▿ (2 elements)
                ▿ .0: Stella.Pattern.variant
                  ▿ variant: (2 elements)
                    ▿ .0: Stella.Identifier
                      - value: "fail"
                    ▿ .1: Optional(Stella.Pattern.var(Stella.Identifier(value: "f")))
                      ▿ some: Stella.Pattern.var
                        ▿ var: Stella.Identifier
                          - value: "f"
                ▿ .1: Stella.Expression.constInt
                  - constInt: 0
