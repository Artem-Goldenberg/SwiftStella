▿ Stella.Program
  - languageDeclaration: Stella.LanguageDeclaration.languageCore
  ▿ extensions: 2 elements
    ▿ Stella.LanguageExtension
      ▿ names: 1 element
        ▿ Stella.LanguageExtension.Name
          - value: "sum-types"
    ▿ Stella.LanguageExtension
      ▿ names: 1 element
        ▿ Stella.LanguageExtension.Name
          - value: "pairs"
  ▿ declarations: 2 elements
    ▿ Stella.Declaration.function
      ▿ function: (7 elements)
        - annotations: 0 elements
        ▿ name: Stella.Identifier
          - value: "g"
        ▿ parameters: 1 element
          ▿ Stella.Declaration.Parameter
            ▿ name: Stella.Identifier
              - value: "x"
            ▿ type: Stella.Type.sum
              ▿ sum: (2 elements)
                - left: Stella.Type.nat
                ▿ right: Stella.Type.sum
                  ▿ sum: (2 elements)
                    - left: Stella.Type.bool
                    ▿ right: Stella.Type.function
                      ▿ function: (2 elements)
                        ▿ from: 1 element
                          - Stella.Type.nat
                        - to: Stella.Type.nat
        ▿ returnType: Optional(Stella.Type.nat)
          - some: Stella.Type.nat
        - throwTypes: 0 elements
        - body: 0 elements
        ▿ return: Stella.Expression.match
          ▿ match: (2 elements)
            ▿ .0: Stella.Expression.var
              ▿ var: Stella.Identifier
                - value: "x"
            ▿ .1: 2 elements
              ▿ (2 elements)
                ▿ .0: Stella.Pattern.inl
                  ▿ inl: Stella.Pattern.var
                    ▿ var: Stella.Identifier
                      - value: "n"
                ▿ .1: Stella.Expression.succ
                  ▿ succ: Stella.Expression.var
                    ▿ var: Stella.Identifier
                      - value: "n"
              ▿ (2 elements)
                ▿ .0: Stella.Pattern.inr
                  ▿ inr: Stella.Pattern.var
                    ▿ var: Stella.Identifier
                      - value: "bf"
                ▿ .1: Stella.Expression.match
                  ▿ match: (2 elements)
                    ▿ .0: Stella.Expression.tuple
                      ▿ tuple: 2 elements
                        ▿ Stella.Expression.succ
                          ▿ succ: Stella.Expression.constInt
                            - constInt: 0
                        ▿ Stella.Expression.constInt
                          - constInt: 0
                    ▿ .1: 2 elements
                      ▿ (2 elements)
                        ▿ .0: Stella.Pattern.inr
                          ▿ inr: Stella.Pattern.var
                            ▿ var: Stella.Identifier
                              - value: "f"
                        ▿ .1: Stella.Expression.application
                          ▿ application: (2 elements)
                            ▿ .0: Stella.Expression.var
                              ▿ var: Stella.Identifier
                                - value: "f"
                            ▿ .1: 1 element
                              ▿ Stella.Expression.application
                                ▿ application: (2 elements)
                                  ▿ .0: Stella.Expression.var
                                    ▿ var: Stella.Identifier
                                      - value: "f"
                                  ▿ .1: 1 element
                                    ▿ Stella.Expression.succ
                                      ▿ succ: Stella.Expression.constInt
                                        - constInt: 0
                      ▿ (2 elements)
                        ▿ .0: Stella.Pattern.inl
                          ▿ inl: Stella.Pattern.var
                            ▿ var: Stella.Identifier
                              - value: "b"
                        ▿ .1: Stella.Expression.if
                          ▿ if: (3 elements)
                            ▿ condition: Stella.Expression.var
                              ▿ var: Stella.Identifier
                                - value: "b"
                            ▿ then: Stella.Expression.succ
                              ▿ succ: Stella.Expression.constInt
                                - constInt: 0
                            ▿ else: Stella.Expression.constInt
                              - constInt: 0
    ▿ Stella.Declaration.function
      ▿ function: (7 elements)
        - annotations: 0 elements
        ▿ name: Stella.Identifier
          - value: "main"
        ▿ parameters: 1 element
          ▿ Stella.Declaration.Parameter
            ▿ name: Stella.Identifier
              - value: "x"
            - type: Stella.Type.nat
        ▿ returnType: Optional(Stella.Type.nat)
          - some: Stella.Type.nat
        - throwTypes: 0 elements
        - body: 0 elements
        ▿ return: Stella.Expression.application
          ▿ application: (2 elements)
            ▿ .0: Stella.Expression.var
              ▿ var: Stella.Identifier
                - value: "g"
            ▿ .1: 1 element
              ▿ Stella.Expression.inr
                ▿ inr: Stella.Expression.inr
                  ▿ inr: Stella.Expression.abstraction
                    ▿ abstraction: (2 elements)
                      ▿ .0: 1 element
                        ▿ Stella.Declaration.Parameter
                          ▿ name: Stella.Identifier
                            - value: "n"
                          - type: Stella.Type.nat
                      ▿ .1: Stella.Expression.application
                        ▿ application: (2 elements)
                          ▿ .0: Stella.Expression.var
                            ▿ var: Stella.Identifier
                              - value: "g"
                          ▿ .1: 1 element
                            ▿ Stella.Expression.inl
                              ▿ inl: Stella.Expression.var
                                ▿ var: Stella.Identifier
                                  - value: "n"
