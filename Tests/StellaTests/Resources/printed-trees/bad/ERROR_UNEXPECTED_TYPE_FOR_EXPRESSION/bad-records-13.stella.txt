▿ Stella.Program
  - languageDeclaration: Stella.LanguageDeclaration.languageCore
  ▿ extensions: 1 element
    ▿ Stella.LanguageExtension
      ▿ names: 1 element
        ▿ Stella.LanguageExtension.Name
          - value: "records"
  ▿ declarations: 2 elements
    ▿ Stella.Declaration.function
      ▿ function: (7 elements)
        - annotations: 0 elements
        ▿ name: Stella.Identifier
          - value: "mk"
        ▿ parameters: 1 element
          ▿ Stella.Declaration.Parameter
            ▿ name: Stella.Identifier
              - value: "k"
            ▿ type: Stella.Type.function
              ▿ function: (2 elements)
                ▿ from: 1 element
                  - Stella.Type.nat
                - to: Stella.Type.bool
        ▿ returnType: Optional(Stella.Type.record([(Stella.Identifier(value: "x"), Stella.Type.function(from: [Stella.Type.bool], to: Stella.Type.nat)), (Stella.Identifier(value: "y"), Stella.Type.nat)]))
          ▿ some: Stella.Type.record
            ▿ record: 2 elements
              ▿ (2 elements)
                ▿ .0: Stella.Identifier
                  - value: "x"
                ▿ .1: Stella.Type.function
                  ▿ function: (2 elements)
                    ▿ from: 1 element
                      - Stella.Type.bool
                    - to: Stella.Type.nat
              ▿ (2 elements)
                ▿ .0: Stella.Identifier
                  - value: "y"
                - .1: Stella.Type.nat
        - throwTypes: 0 elements
        - body: 0 elements
        ▿ return: Stella.Expression.dotRecord
          ▿ dotRecord: (2 elements)
            ▿ .0: Stella.Expression.dotRecord
              ▿ dotRecord: (2 elements)
                ▿ .0: Stella.Expression.record
                  ▿ record: 2 elements
                    ▿ (2 elements)
                      ▿ .0: Stella.Identifier
                        - value: "x"
                      ▿ .1: Stella.Expression.record
                        ▿ record: 2 elements
                          ▿ (2 elements)
                            ▿ .0: Stella.Identifier
                              - value: "x"
                            ▿ .1: Stella.Expression.abstraction
                              ▿ abstraction: (2 elements)
                                ▿ .0: 1 element
                                  ▿ Stella.Declaration.Parameter
                                    ▿ name: Stella.Identifier
                                      - value: "x"
                                    - type: Stella.Type.bool
                                ▿ .1: Stella.Expression.if
                                  ▿ if: (3 elements)
                                    ▿ condition: Stella.Expression.application
                                      ▿ application: (2 elements)
                                        ▿ .0: Stella.Expression.var
                                          ▿ var: Stella.Identifier
                                            - value: "k"
                                        ▿ .1: 1 element
                                          ▿ Stella.Expression.succ
                                            ▿ succ: Stella.Expression.constInt
                                              - constInt: 0
                                    ▿ then: Stella.Expression.if
                                      ▿ if: (3 elements)
                                        ▿ condition: Stella.Expression.var
                                          ▿ var: Stella.Identifier
                                            - value: "x"
                                        ▿ then: Stella.Expression.constInt
                                          - constInt: 0
                                        ▿ else: Stella.Expression.succ
                                          ▿ succ: Stella.Expression.constInt
                                            - constInt: 0
                                    ▿ else: Stella.Expression.succ
                                      ▿ succ: Stella.Expression.succ
                                        ▿ succ: Stella.Expression.constInt
                                          - constInt: 0
                          ▿ (2 elements)
                            ▿ .0: Stella.Identifier
                              - value: "y"
                            ▿ .1: Stella.Expression.succ
                              ▿ succ: Stella.Expression.constInt
                                - constInt: 0
                    ▿ (2 elements)
                      ▿ .0: Stella.Identifier
                        - value: "y"
                      ▿ .1: Stella.Expression.record
                        ▿ record: 2 elements
                          ▿ (2 elements)
                            ▿ .0: Stella.Identifier
                              - value: "x"
                            ▿ .1: Stella.Expression.abstraction
                              ▿ abstraction: (2 elements)
                                ▿ .0: 1 element
                                  ▿ Stella.Declaration.Parameter
                                    ▿ name: Stella.Identifier
                                      - value: "x"
                                    - type: Stella.Type.bool
                                ▿ .1: Stella.Expression.if
                                  ▿ if: (3 elements)
                                    ▿ condition: Stella.Expression.application
                                      ▿ application: (2 elements)
                                        ▿ .0: Stella.Expression.var
                                          ▿ var: Stella.Identifier
                                            - value: "k"
                                        ▿ .1: 1 element
                                          ▿ Stella.Expression.succ
                                            ▿ succ: Stella.Expression.constInt
                                              - constInt: 0
                                    ▿ then: Stella.Expression.if
                                      ▿ if: (3 elements)
                                        ▿ condition: Stella.Expression.var
                                          ▿ var: Stella.Identifier
                                            - value: "x"
                                        ▿ then: Stella.Expression.constInt
                                          - constInt: 0
                                        ▿ else: Stella.Expression.succ
                                          ▿ succ: Stella.Expression.constInt
                                            - constInt: 0
                                    ▿ else: Stella.Expression.succ
                                      ▿ succ: Stella.Expression.succ
                                        ▿ succ: Stella.Expression.constInt
                                          - constInt: 0
                          ▿ (2 elements)
                            ▿ .0: Stella.Identifier
                              - value: "y"
                            ▿ .1: Stella.Expression.succ
                              ▿ succ: Stella.Expression.constInt
                                - constInt: 0
                ▿ .1: Stella.Identifier
                  - value: "x"
            ▿ .1: Stella.Identifier
              - value: "x"
    ▿ Stella.Declaration.function
      ▿ function: (7 elements)
        - annotations: 0 elements
        ▿ name: Stella.Identifier
          - value: "main"
        ▿ parameters: 1 element
          ▿ Stella.Declaration.Parameter
            ▿ name: Stella.Identifier
              - value: "x"
            - type: Stella.Type.nat
        ▿ returnType: Optional(Stella.Type.nat)
          - some: Stella.Type.nat
        - throwTypes: 0 elements
        - body: 0 elements
        ▿ return: Stella.Expression.application
          ▿ application: (2 elements)
            ▿ .0: Stella.Expression.dotRecord
              ▿ dotRecord: (2 elements)
                ▿ .0: Stella.Expression.application
                  ▿ application: (2 elements)
                    ▿ .0: Stella.Expression.var
                      ▿ var: Stella.Identifier
                        - value: "mk"
                    ▿ .1: 1 element
                      ▿ Stella.Expression.abstraction
                        ▿ abstraction: (2 elements)
                          ▿ .0: 1 element
                            ▿ Stella.Declaration.Parameter
                              ▿ name: Stella.Identifier
                                - value: "x"
                              - type: Stella.Type.nat
                          ▿ .1: Stella.Expression.isZero
                            ▿ isZero: Stella.Expression.var
                              ▿ var: Stella.Identifier
                                - value: "x"
                ▿ .1: Stella.Identifier
                  - value: "x"
            ▿ .1: 1 element
              - Stella.Expression.constFalse
