▿ Stella.Program
  - languageDeclaration: Stella.LanguageDeclaration.languageCore
  ▿ extensions: 1 element
    ▿ Stella.LanguageExtension
      ▿ names: 2 elements
        ▿ Stella.LanguageExtension.Name
          - value: "#variants"
        ▿ Stella.LanguageExtension.Name
          - value: "#unit-type"
  ▿ declarations: 2 elements
    ▿ Stella.Declaration.function
      ▿ function: (7 elements)
        - annotations: 0 elements
        ▿ name: Stella.Identifier
          - value: "foo"
        ▿ parameters: 1 element
          ▿ Stella.Declaration.Parameter
            ▿ name: Stella.Identifier
              - value: "succeed"
            - type: Stella.Type.bool
        ▿ returnType: Optional(Stella.Type.variant([(Stella.Identifier(value: "failure"), Optional(Stella.Type.nat)), (Stella.Identifier(value: "value"), Optional(Stella.Type.nat))]))
          ▿ some: Stella.Type.variant
            ▿ variant: 2 elements
              ▿ (2 elements)
                ▿ .0: Stella.Identifier
                  - value: "failure"
                ▿ .1: Optional(Stella.Type.nat)
                  - some: Stella.Type.nat
              ▿ (2 elements)
                ▿ .0: Stella.Identifier
                  - value: "value"
                ▿ .1: Optional(Stella.Type.nat)
                  - some: Stella.Type.nat
        - throwTypes: 0 elements
        - body: 0 elements
        ▿ return: Stella.Expression.variant
          ▿ variant: (2 elements)
            ▿ .0: Stella.Identifier
              - value: "value"
            ▿ .1: Optional(Stella.Expression.constInt(0))
              ▿ some: Stella.Expression.constInt
                - constInt: 0
    ▿ Stella.Declaration.function
      ▿ function: (7 elements)
        - annotations: 0 elements
        ▿ name: Stella.Identifier
          - value: "main"
        ▿ parameters: 1 element
          ▿ Stella.Declaration.Parameter
            ▿ name: Stella.Identifier
              - value: "succeed"
            - type: Stella.Type.nat
        ▿ returnType: Optional(Stella.Type.variant([(Stella.Identifier(value: "value"), Optional(Stella.Type.nat)), (Stella.Identifier(value: "failure"), Optional(Stella.Type.nat))]))
          ▿ some: Stella.Type.variant
            ▿ variant: 2 elements
              ▿ (2 elements)
                ▿ .0: Stella.Identifier
                  - value: "value"
                ▿ .1: Optional(Stella.Type.nat)
                  - some: Stella.Type.nat
              ▿ (2 elements)
                ▿ .0: Stella.Identifier
                  - value: "failure"
                ▿ .1: Optional(Stella.Type.nat)
                  - some: Stella.Type.nat
        - throwTypes: 0 elements
        - body: 0 elements
        ▿ return: Stella.Expression.application
          ▿ application: (2 elements)
            ▿ .0: Stella.Expression.var
              ▿ var: Stella.Identifier
                - value: "foo"
            ▿ .1: 1 element
              - Stella.Expression.constTrue
