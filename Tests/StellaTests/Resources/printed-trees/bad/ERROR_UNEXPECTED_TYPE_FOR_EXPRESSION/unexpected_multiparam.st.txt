▿ Stella.Program
  - languageDeclaration: Stella.LanguageDeclaration.languageCore
  ▿ extensions: 1 element
    ▿ Stella.LanguageExtension
      ▿ names: 1 element
        ▿ Stella.LanguageExtension.Name
          - value: "multiparameter-functions"
  ▿ declarations: 3 elements
    ▿ Stella.Declaration.function
      ▿ function: (7 elements)
        - annotations: 0 elements
        ▿ name: Stella.Identifier
          - value: "m_f"
        ▿ parameters: 2 elements
          ▿ Stella.Declaration.Parameter
            ▿ name: Stella.Identifier
              - value: "a"
            - type: Stella.Type.nat
          ▿ Stella.Declaration.Parameter
            ▿ name: Stella.Identifier
              - value: "b"
            - type: Stella.Type.bool
        ▿ returnType: Optional(Stella.Type.nat)
          - some: Stella.Type.nat
        - throwTypes: 0 elements
        - body: 0 elements
        ▿ return: Stella.Expression.if
          ▿ if: (3 elements)
            ▿ condition: Stella.Expression.var
              ▿ var: Stella.Identifier
                - value: "b"
            ▿ then: Stella.Expression.var
              ▿ var: Stella.Identifier
                - value: "a"
            ▿ else: Stella.Expression.constInt
              - constInt: 0
    ▿ Stella.Declaration.function
      ▿ function: (7 elements)
        - annotations: 0 elements
        ▿ name: Stella.Identifier
          - value: "get_m_f"
        ▿ parameters: 3 elements
          ▿ Stella.Declaration.Parameter
            ▿ name: Stella.Identifier
              - value: "a"
            - type: Stella.Type.nat
          ▿ Stella.Declaration.Parameter
            ▿ name: Stella.Identifier
              - value: "b"
            - type: Stella.Type.bool
          ▿ Stella.Declaration.Parameter
            ▿ name: Stella.Identifier
              - value: "c"
            - type: Stella.Type.nat
        ▿ returnType: Optional(Stella.Type.function(from: [Stella.Type.nat, Stella.Type.bool], to: Stella.Type.nat))
          ▿ some: Stella.Type.function
            ▿ function: (2 elements)
              ▿ from: 2 elements
                - Stella.Type.nat
                - Stella.Type.bool
              - to: Stella.Type.nat
        - throwTypes: 0 elements
        - body: 0 elements
        ▿ return: Stella.Expression.var
          ▿ var: Stella.Identifier
            - value: "m_f"
    ▿ Stella.Declaration.function
      ▿ function: (7 elements)
        - annotations: 0 elements
        ▿ name: Stella.Identifier
          - value: "main"
        ▿ parameters: 1 element
          ▿ Stella.Declaration.Parameter
            ▿ name: Stella.Identifier
              - value: "n"
            - type: Stella.Type.nat
        ▿ returnType: Optional(Stella.Type.nat)
          - some: Stella.Type.nat
        - throwTypes: 0 elements
        - body: 0 elements
        ▿ return: Stella.Expression.application
          ▿ application: (2 elements)
            ▿ .0: Stella.Expression.var
              ▿ var: Stella.Identifier
                - value: "get_m_f"
            ▿ .1: 3 elements
              ▿ Stella.Expression.constInt
                - constInt: 0
              - Stella.Expression.constTrue
              ▿ Stella.Expression.constInt
                - constInt: 0
