▿ Stella.Program
  - languageDeclaration: Stella.LanguageDeclaration.languageCore
  ▿ extensions: 1 element
    ▿ Stella.LanguageExtension
      ▿ names: 4 elements
        ▿ Stella.LanguageExtension.Name
          - value: "#structural-patterns"
        ▿ Stella.LanguageExtension.Name
          - value: "#natural-literals"
        ▿ Stella.LanguageExtension.Name
          - value: "#variants"
        ▿ Stella.LanguageExtension.Name
          - value: "#nullary-variant-labels"
  ▿ declarations: 1 element
    ▿ Stella.Declaration.function
      ▿ function: (7 elements)
        - annotations: 0 elements
        ▿ name: Stella.Identifier
          - value: "main"
        ▿ parameters: 1 element
          ▿ Stella.Declaration.Parameter
            ▿ name: Stella.Identifier
              - value: "n"
            - type: Stella.Type.nat
        ▿ returnType: Optional(Stella.Type.variant([(Stella.Identifier(value: "a"), Optional(Stella.Type.nat)), (Stella.Identifier(value: "b"), nil), (Stella.Identifier(value: "c"), nil)]))
          ▿ some: Stella.Type.variant
            ▿ variant: 3 elements
              ▿ (2 elements)
                ▿ .0: Stella.Identifier
                  - value: "a"
                ▿ .1: Optional(Stella.Type.nat)
                  - some: Stella.Type.nat
              ▿ (2 elements)
                ▿ .0: Stella.Identifier
                  - value: "b"
                - .1: nil
              ▿ (2 elements)
                ▿ .0: Stella.Identifier
                  - value: "c"
                - .1: nil
        - throwTypes: 0 elements
        - body: 0 elements
        ▿ return: Stella.Expression.variant
          ▿ variant: (2 elements)
            ▿ .0: Stella.Identifier
              - value: "b"
            ▿ .1: Optional(Stella.Expression.constTrue)
              - some: Stella.Expression.constTrue
