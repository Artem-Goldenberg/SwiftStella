▿ Stella.Program
  - languageDeclaration: Stella.LanguageDeclaration.languageCore
  ▿ extensions: 1 element
    ▿ Stella.LanguageExtension
      ▿ names: 4 elements
        ▿ Stella.LanguageExtension.Name
          - value: "letrec-bindings"
        ▿ Stella.LanguageExtension.Name
          - value: "let-patterns"
        ▿ Stella.LanguageExtension.Name
          - value: "pattern-ascriptions"
        ▿ Stella.LanguageExtension.Name
          - value: "variants"
  ▿ declarations: 1 element
    ▿ Stella.Declaration.function
      ▿ function: (7 elements)
        - annotations: 0 elements
        ▿ name: Stella.Identifier
          - value: "main"
        ▿ parameters: 1 element
          ▿ Stella.Declaration.Parameter
            ▿ name: Stella.Identifier
              - value: "n"
            - type: Stella.Type.nat
        ▿ returnType: Optional(Stella.Type.variant([(Stella.Identifier(value: "a"), Optional(Stella.Type.nat)), (Stella.Identifier(value: "b"), Optional(Stella.Type.bool))]))
          ▿ some: Stella.Type.variant
            ▿ variant: 2 elements
              ▿ (2 elements)
                ▿ .0: Stella.Identifier
                  - value: "a"
                ▿ .1: Optional(Stella.Type.nat)
                  - some: Stella.Type.nat
              ▿ (2 elements)
                ▿ .0: Stella.Identifier
                  - value: "b"
                ▿ .1: Optional(Stella.Type.bool)
                  - some: Stella.Type.bool
        - throwTypes: 0 elements
        - body: 0 elements
        ▿ return: Stella.Expression.application
          ▿ application: (2 elements)
            ▿ .0: Stella.Expression.abstraction
              ▿ abstraction: (2 elements)
                ▿ .0: 1 element
                  ▿ Stella.Declaration.Parameter
                    ▿ name: Stella.Identifier
                      - value: "a"
                    - type: Stella.Type.nat
                ▿ .1: Stella.Expression.if
                  ▿ if: (3 elements)
                    - condition: Stella.Expression.constTrue
                    ▿ then: Stella.Expression.variant
                      ▿ variant: (2 elements)
                        ▿ .0: Stella.Identifier
                          - value: "a"
                        ▿ .1: Optional(Stella.Expression.constInt(0))
                          ▿ some: Stella.Expression.constInt
                            - constInt: 0
                    ▿ else: Stella.Expression.variant
                      ▿ variant: (2 elements)
                        ▿ .0: Stella.Identifier
                          - value: "b"
                        ▿ .1: Optional(Stella.Expression.constTrue)
                          - some: Stella.Expression.constTrue
            ▿ .1: 1 element
              ▿ Stella.Expression.constInt
                - constInt: 0
