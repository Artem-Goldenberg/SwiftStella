▿ Stella.Program
  - languageDeclaration: Stella.LanguageDeclaration.languageCore
  ▿ extensions: 3 elements
    ▿ Stella.LanguageExtension
      ▿ names: 1 element
        ▿ Stella.LanguageExtension.Name
          - value: "variants"
    ▿ Stella.LanguageExtension
      ▿ names: 1 element
        ▿ Stella.LanguageExtension.Name
          - value: "type-ascriptions"
    ▿ Stella.LanguageExtension
      ▿ names: 1 element
        ▿ Stella.LanguageExtension.Name
          - value: "pairs"
  ▿ declarations: 1 element
    ▿ Stella.Declaration.function
      ▿ function: (7 elements)
        - annotations: 0 elements
        ▿ name: Stella.Identifier
          - value: "main"
        ▿ parameters: 1 element
          ▿ Stella.Declaration.Parameter
            ▿ name: Stella.Identifier
              - value: "n"
            - type: Stella.Type.nat
        ▿ returnType: Optional(Stella.Type.nat)
          - some: Stella.Type.nat
        - throwTypes: 0 elements
        - body: 0 elements
        ▿ return: Stella.Expression.dotTuple
          ▿ dotTuple: (2 elements)
            ▿ .0: Stella.Expression.tuple
              ▿ tuple: 2 elements
                ▿ Stella.Expression.variant
                  ▿ variant: (2 elements)
                    ▿ .0: Stella.Identifier
                      - value: "value"
                    ▿ .1: Optional(Stella.Expression.var(Stella.Identifier(value: "n")))
                      ▿ some: Stella.Expression.var
                        ▿ var: Stella.Identifier
                          - value: "n"
                ▿ Stella.Expression.constInt
                  - constInt: 0
            - .1: 2
