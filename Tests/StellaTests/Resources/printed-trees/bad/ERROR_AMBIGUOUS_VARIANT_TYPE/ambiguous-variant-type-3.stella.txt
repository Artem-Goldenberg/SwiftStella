▿ Stella.Program
  - languageDeclaration: Stella.LanguageDeclaration.languageCore
  ▿ extensions: 2 elements
    ▿ Stella.LanguageExtension
      ▿ names: 1 element
        ▿ Stella.LanguageExtension.Name
          - value: "variants"
    ▿ Stella.LanguageExtension
      ▿ names: 1 element
        ▿ Stella.LanguageExtension.Name
          - value: "type-ascriptions"
  ▿ declarations: 2 elements
    ▿ Stella.Declaration.function
      ▿ function: (7 elements)
        - annotations: 0 elements
        ▿ name: Stella.Identifier
          - value: "g"
        ▿ parameters: 1 element
          ▿ Stella.Declaration.Parameter
            ▿ name: Stella.Identifier
              - value: "x"
            ▿ type: Stella.Type.variant
              ▿ variant: 3 elements
                ▿ (2 elements)
                  ▿ .0: Stella.Identifier
                    - value: "number"
                  ▿ .1: Optional(Stella.Type.nat)
                    - some: Stella.Type.nat
                ▿ (2 elements)
                  ▿ .0: Stella.Identifier
                    - value: "boolean"
                  ▿ .1: Optional(Stella.Type.bool)
                    - some: Stella.Type.bool
                ▿ (2 elements)
                  ▿ .0: Stella.Identifier
                    - value: "function"
                  ▿ .1: Optional(Stella.Type.function(from: [Stella.Type.nat], to: Stella.Type.nat))
                    ▿ some: Stella.Type.function
                      ▿ function: (2 elements)
                        ▿ from: 1 element
                          - Stella.Type.nat
                        - to: Stella.Type.nat
        ▿ returnType: Optional(Stella.Type.nat)
          - some: Stella.Type.nat
        - throwTypes: 0 elements
        - body: 0 elements
        ▿ return: Stella.Expression.match
          ▿ match: (2 elements)
            ▿ .0: Stella.Expression.variant
              ▿ variant: (2 elements)
                ▿ .0: Stella.Identifier
                  - value: "value"
                ▿ .1: Optional(Stella.Expression.var(Stella.Identifier(value: "n")))
                  ▿ some: Stella.Expression.var
                    ▿ var: Stella.Identifier
                      - value: "n"
            ▿ .1: 3 elements
              ▿ (2 elements)
                ▿ .0: Stella.Pattern.variant
                  ▿ variant: (2 elements)
                    ▿ .0: Stella.Identifier
                      - value: "number"
                    ▿ .1: Optional(Stella.Pattern.var(Stella.Identifier(value: "n")))
                      ▿ some: Stella.Pattern.var
                        ▿ var: Stella.Identifier
                          - value: "n"
                ▿ .1: Stella.Expression.succ
                  ▿ succ: Stella.Expression.var
                    ▿ var: Stella.Identifier
                      - value: "n"
              ▿ (2 elements)
                ▿ .0: Stella.Pattern.variant
                  ▿ variant: (2 elements)
                    ▿ .0: Stella.Identifier
                      - value: "boolean"
                    ▿ .1: Optional(Stella.Pattern.var(Stella.Identifier(value: "b")))
                      ▿ some: Stella.Pattern.var
                        ▿ var: Stella.Identifier
                          - value: "b"
                ▿ .1: Stella.Expression.if
                  ▿ if: (3 elements)
                    ▿ condition: Stella.Expression.var
                      ▿ var: Stella.Identifier
                        - value: "b"
                    ▿ then: Stella.Expression.succ
                      ▿ succ: Stella.Expression.constInt
                        - constInt: 0
                    ▿ else: Stella.Expression.constInt
                      - constInt: 0
              ▿ (2 elements)
                ▿ .0: Stella.Pattern.variant
                  ▿ variant: (2 elements)
                    ▿ .0: Stella.Identifier
                      - value: "function"
                    ▿ .1: Optional(Stella.Pattern.var(Stella.Identifier(value: "f")))
                      ▿ some: Stella.Pattern.var
                        ▿ var: Stella.Identifier
                          - value: "f"
                ▿ .1: Stella.Expression.application
                  ▿ application: (2 elements)
                    ▿ .0: Stella.Expression.var
                      ▿ var: Stella.Identifier
                        - value: "f"
                    ▿ .1: 1 element
                      ▿ Stella.Expression.application
                        ▿ application: (2 elements)
                          ▿ .0: Stella.Expression.var
                            ▿ var: Stella.Identifier
                              - value: "f"
                          ▿ .1: 1 element
                            ▿ Stella.Expression.succ
                              ▿ succ: Stella.Expression.constInt
                                - constInt: 0
    ▿ Stella.Declaration.function
      ▿ function: (7 elements)
        - annotations: 0 elements
        ▿ name: Stella.Identifier
          - value: "main"
        ▿ parameters: 1 element
          ▿ Stella.Declaration.Parameter
            ▿ name: Stella.Identifier
              - value: "x"
            - type: Stella.Type.nat
        ▿ returnType: Optional(Stella.Type.nat)
          - some: Stella.Type.nat
        - throwTypes: 0 elements
        - body: 0 elements
        ▿ return: Stella.Expression.application
          ▿ application: (2 elements)
            ▿ .0: Stella.Expression.var
              ▿ var: Stella.Identifier
                - value: "g"
            ▿ .1: 1 element
              ▿ Stella.Expression.typeAscription
                ▿ typeAscription: (2 elements)
                  ▿ .0: Stella.Expression.variant
                    ▿ variant: (2 elements)
                      ▿ .0: Stella.Identifier
                        - value: "function"
                      ▿ .1: Optional(Stella.Expression.abstraction([Stella.Declaration.Parameter(name: Stella.Identifier(value: "n"), type: Stella.Type.nat)], Stella.Expression.application(Stella.Expression.var(Stella.Identifier(value: "g")), [Stella.Expression.typeAscription(Stella.Expression.variant(Stella.Identifier(value: "number"), Optional(Stella.Expression.var(Stella.Identifier(value: "n")))), Stella.Type.variant([(Stella.Identifier(value: "number"), Optional(Stella.Type.nat)), (Stella.Identifier(value: "boolean"), Optional(Stella.Type.bool)), (Stella.Identifier(value: "function"), Optional(Stella.Type.function(from: [Stella.Type.nat], to: Stella.Type.nat)))]))])))
                        ▿ some: Stella.Expression.abstraction
                          ▿ abstraction: (2 elements)
                            ▿ .0: 1 element
                              ▿ Stella.Declaration.Parameter
                                ▿ name: Stella.Identifier
                                  - value: "n"
                                - type: Stella.Type.nat
                            ▿ .1: Stella.Expression.application
                              ▿ application: (2 elements)
                                ▿ .0: Stella.Expression.var
                                  ▿ var: Stella.Identifier
                                    - value: "g"
                                ▿ .1: 1 element
                                  ▿ Stella.Expression.typeAscription
                                    ▿ typeAscription: (2 elements)
                                      ▿ .0: Stella.Expression.variant
                                        ▿ variant: (2 elements)
                                          ▿ .0: Stella.Identifier
                                            - value: "number"
                                          ▿ .1: Optional(Stella.Expression.var(Stella.Identifier(value: "n")))
                                            ▿ some: Stella.Expression.var
                                              ▿ var: Stella.Identifier
                                                - value: "n"
                                      ▿ .1: Stella.Type.variant
                                        ▿ variant: 3 elements
                                          ▿ (2 elements)
                                            ▿ .0: Stella.Identifier
                                              - value: "number"
                                            ▿ .1: Optional(Stella.Type.nat)
                                              - some: Stella.Type.nat
                                          ▿ (2 elements)
                                            ▿ .0: Stella.Identifier
                                              - value: "boolean"
                                            ▿ .1: Optional(Stella.Type.bool)
                                              - some: Stella.Type.bool
                                          ▿ (2 elements)
                                            ▿ .0: Stella.Identifier
                                              - value: "function"
                                            ▿ .1: Optional(Stella.Type.function(from: [Stella.Type.nat], to: Stella.Type.nat))
                                              ▿ some: Stella.Type.function
                                                ▿ function: (2 elements)
                                                  ▿ from: 1 element
                                                    - Stella.Type.nat
                                                  - to: Stella.Type.nat
                  ▿ .1: Stella.Type.variant
                    ▿ variant: 3 elements
                      ▿ (2 elements)
                        ▿ .0: Stella.Identifier
                          - value: "number"
                        ▿ .1: Optional(Stella.Type.nat)
                          - some: Stella.Type.nat
                      ▿ (2 elements)
                        ▿ .0: Stella.Identifier
                          - value: "boolean"
                        ▿ .1: Optional(Stella.Type.bool)
                          - some: Stella.Type.bool
                      ▿ (2 elements)
                        ▿ .0: Stella.Identifier
                          - value: "function"
                        ▿ .1: Optional(Stella.Type.function(from: [Stella.Type.nat], to: Stella.Type.nat))
                          ▿ some: Stella.Type.function
                            ▿ function: (2 elements)
                              ▿ from: 1 element
                                - Stella.Type.nat
                              - to: Stella.Type.nat
