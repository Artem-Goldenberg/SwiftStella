▿ Stella.Program
  - languageDeclaration: Stella.LanguageDeclaration.languageCore
  ▿ extensions: 1 element
    ▿ Stella.LanguageExtension
      ▿ names: 5 elements
        ▿ Stella.LanguageExtension.Name
          - value: "records"
        ▿ Stella.LanguageExtension.Name
          - value: "natural-literals"
        ▿ Stella.LanguageExtension.Name
          - value: "top-type"
        ▿ Stella.LanguageExtension.Name
          - value: "bottom-type"
        ▿ Stella.LanguageExtension.Name
          - value: "structural-subtyping"
  ▿ declarations: 2 elements
    ▿ Stella.Declaration.function
      ▿ function: (7 elements)
        - annotations: 0 elements
        ▿ name: Stella.Identifier
          - value: "iterate"
        ▿ parameters: 1 element
          ▿ Stella.Declaration.Parameter
            ▿ name: Stella.Identifier
              - value: "n"
            - type: Stella.Type.nat
        ▿ returnType: Optional(Stella.Type.record([(Stella.Identifier(value: "current"), Stella.Type.nat)]))
          ▿ some: Stella.Type.record
            ▿ record: 1 element
              ▿ (2 elements)
                ▿ .0: Stella.Identifier
                  - value: "current"
                - .1: Stella.Type.nat
        - throwTypes: 0 elements
        - body: 0 elements
        ▿ return: Stella.Expression.record
          ▿ record: 2 elements
            ▿ (2 elements)
              ▿ .0: Stella.Identifier
                - value: "current"
              ▿ .1: Stella.Expression.var
                ▿ var: Stella.Identifier
                  - value: "n"
            ▿ (2 elements)
              ▿ .0: Stella.Identifier
                - value: "next"
              ▿ .1: Stella.Expression.succ
                ▿ succ: Stella.Expression.var
                  ▿ var: Stella.Identifier
                    - value: "n"
    ▿ Stella.Declaration.function
      ▿ function: (7 elements)
        - annotations: 0 elements
        ▿ name: Stella.Identifier
          - value: "main"
        ▿ parameters: 1 element
          ▿ Stella.Declaration.Parameter
            ▿ name: Stella.Identifier
              - value: "n"
            - type: Stella.Type.nat
        ▿ returnType: Optional(Stella.Type.record([(Stella.Identifier(value: "current"), Stella.Type.nat), (Stella.Identifier(value: "next"), Stella.Type.nat)]))
          ▿ some: Stella.Type.record
            ▿ record: 2 elements
              ▿ (2 elements)
                ▿ .0: Stella.Identifier
                  - value: "current"
                - .1: Stella.Type.nat
              ▿ (2 elements)
                ▿ .0: Stella.Identifier
                  - value: "next"
                - .1: Stella.Type.nat
        - throwTypes: 0 elements
        - body: 0 elements
        ▿ return: Stella.Expression.application
          ▿ application: (2 elements)
            ▿ .0: Stella.Expression.var
              ▿ var: Stella.Identifier
                - value: "iterate"
            ▿ .1: 1 element
              ▿ Stella.Expression.constInt
                - constInt: 0
