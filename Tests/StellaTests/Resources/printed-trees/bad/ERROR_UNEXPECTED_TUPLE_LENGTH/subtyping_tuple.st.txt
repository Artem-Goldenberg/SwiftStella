▿ Stella.Program
  - languageDeclaration: Stella.LanguageDeclaration.languageCore
  ▿ extensions: 1 element
    ▿ Stella.LanguageExtension
      ▿ names: 5 elements
        ▿ Stella.LanguageExtension.Name
          - value: "tuples"
        ▿ Stella.LanguageExtension.Name
          - value: "natural-literals"
        ▿ Stella.LanguageExtension.Name
          - value: "top-type"
        ▿ Stella.LanguageExtension.Name
          - value: "bottom-type"
        ▿ Stella.LanguageExtension.Name
          - value: "structural-subtyping"
  ▿ declarations: 2 elements
    ▿ Stella.Declaration.function
      ▿ function: (7 elements)
        - annotations: 0 elements
        ▿ name: Stella.Identifier
          - value: "tuple_gen"
        ▿ parameters: 1 element
          ▿ Stella.Declaration.Parameter
            ▿ name: Stella.Identifier
              - value: "n"
            - type: Stella.Type.nat
        ▿ returnType: Optional(Stella.Type.tuple([Stella.Type.top, Stella.Type.bool, Stella.Type.nat]))
          ▿ some: Stella.Type.tuple
            ▿ tuple: 3 elements
              - Stella.Type.top
              - Stella.Type.bool
              - Stella.Type.nat
        - throwTypes: 0 elements
        - body: 0 elements
        ▿ return: Stella.Expression.tuple
          ▿ tuple: 3 elements
            ▿ Stella.Expression.constInt
              - constInt: 1
            - Stella.Expression.constTrue
            ▿ Stella.Expression.constInt
              - constInt: 12
    ▿ Stella.Declaration.function
      ▿ function: (7 elements)
        - annotations: 0 elements
        ▿ name: Stella.Identifier
          - value: "main"
        ▿ parameters: 1 element
          ▿ Stella.Declaration.Parameter
            ▿ name: Stella.Identifier
              - value: "n"
            - type: Stella.Type.nat
        ▿ returnType: Optional(Stella.Type.tuple([Stella.Type.top, Stella.Type.bool]))
          ▿ some: Stella.Type.tuple
            ▿ tuple: 2 elements
              - Stella.Type.top
              - Stella.Type.bool
        - throwTypes: 0 elements
        - body: 0 elements
        ▿ return: Stella.Expression.application
          ▿ application: (2 elements)
            ▿ .0: Stella.Expression.var
              ▿ var: Stella.Identifier
                - value: "tuple_gen"
            ▿ .1: 1 element
              ▿ Stella.Expression.var
                ▿ var: Stella.Identifier
                  - value: "n"
